# -*- coding: utf-8 -*-
"""FacialExpressionRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iP7JXlSipPvnIqhQlq0iNUxt-tjMCxDR

F24 CAIS++ Curriculum Winter Project

Facial Expression Recognition (Computer Vision Multi-Class Classification)

About: This dataset consists of 48x48 pixel grayscale images of faces depicting “angry,” “disgust,” “fear,” “happy,” “sad,” “surprise,” and “neutral” expressions

Content: The training and test dataset contains 7 folders each (one for each expression). The training set consists of 28,709 images, and the test set consists of 3,589 images.

Task: Train and evaluate a machine learning/deep learning model to categorize each face based on the emotion shown in the facial expression into one of seven categories (0=Angry, 1=Disgust, 2=Fear, 3=Happy, 4=Sad, 5=Surprise, 6=Neutral)
"""

import matplotlib.pyplot as plt
import numpy as np
import random
import pandas as pd
import seaborn as sb
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import precision_score, recall_score
from tensorflow import keras
import zipfile
import os

zip_file_path = "/content/drive/MyDrive/Colab Notebooks/archive.zip"
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall("fer2013")
os.listdir("fer2013")

train = "fer2013/train"
test = "fer2013/test"

train_datagen = ImageDataGenerator(rescale=1/255.)
test_datagen = ImageDataGenerator(rescale=1/255.)

train_generator = train_datagen.flow_from_directory(
    train,
    target_size = (48, 48),
    color_mode = "grayscale",
    batch_size = 64,
    class_mode = "categorical"
)

test_generator = test_datagen.flow_from_directory(
    test,
    target_size = (48, 48),
    color_mode = "grayscale",
    batch_size = 64,
    class_mode = "categorical"
)

model = Sequential()

model.add(Conv2D(64, (3, 3), activation='relu', input_shape=(48, 48, 1)))
model.add(MaxPool2D((2, 2)))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPool2D((2, 2)))

model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(MaxPool2D((2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.55))
model.add(Dense(7, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')

history = model.fit(train_generator, validation_data=test_generator, epochs=20, verbose = True)

loss, accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {accuracy:.2f}")

# Loss curve
plt.figure(figsize=[6,4])
plt.plot(history.history['loss'], 'black', linewidth=2.0)
plt.plot(history.history['val_loss'], 'green', linewidth=2.0)
plt.legend(['Training Loss', 'Validation Loss'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Loss', fontsize=10)
plt.title('Loss Curves', fontsize=12)

# Accuracy curve
plt.figure(figsize=[6,4])
plt.plot(history.history['accuracy'], 'black', linewidth=2.0)
plt.plot(history.history['val_accuracy'], 'blue', linewidth=2.0)
plt.legend(['Training Accuracy', 'Validation Accuracy'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Accuracy', fontsize=10)
plt.title('Accuracy Curves', fontsize=12)

y_pred = model.predict(test_generator)
y_pred = np.argmax(y_pred, axis=1)

y_true = test_generator.classes

cm = confusion_matrix(y_true, y_pred)


precision = precision_score(y_true, y_pred, average=None)
recall = recall_score(y_true, y_pred, average=None)


print(precision)
print(recall)

cmd = ConfusionMatrixDisplay(cm, display_labels=test_generator.class_indices.keys())
cmd.plot(cmap=plt.cm.Blues)
plt.show()